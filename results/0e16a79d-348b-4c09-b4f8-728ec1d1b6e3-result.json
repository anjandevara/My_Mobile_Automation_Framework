{"name": "test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]", "status": "broken", "statusDetails": {"message": "pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Then \"03 Enter the\". Line 11 in scenario \"02 Verify the maximum and minimum characters that can be sent through a message\" in the feature \"/Users/im-lp-1845/Documents/mobile-automation-framework/Features/Steps/Max_Min_Characters/max_min_characters.feature\"", "trace": "self = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, argname = 'pytestbdd_then_03 Enter the'\n\n    def _get_active_fixturedef(\n        self, argname: str\n    ) -> Union[\"FixtureDef[object]\", PseudoFixtureDef[object]]:\n        try:\n>           return self._fixture_defs[argname]\nE           KeyError: 'pytestbdd_then_03 Enter the'\n\nvenv/lib/python3.10/site-packages/_pytest/fixtures.py:562: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, step = <pytest_bdd.parser.Step object at 0x10377cfd0>\nscenario = <pytest_bdd.parser.Scenario object at 0x10377d030>\n\n    def _find_step_function(request: FixtureRequest, step: Step, scenario: Scenario) -> Any:\n        \"\"\"Match the step defined by the regular expression pattern.\n    \n        :param request: PyTest request object.\n        :param step: Step.\n        :param scenario: Scenario.\n    \n        :return: Function of the step.\n        :rtype: function\n        \"\"\"\n        name = step.name\n        try:\n            # Simple case where no parser is used for the step\n            return request.getfixturevalue(get_step_fixture_name(name, step.type))\n        except FixtureLookupError as e:\n            try:\n                # Could not find a fixture with the same name, let's see if there is a parser involved\n                argumented_name = find_argumented_step_fixture_name(name, step.type, request._fixturemanager, request)\n                if argumented_name:\n                    return request.getfixturevalue(argumented_name)\n>               raise e\n\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:82: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nrequest = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, step = <pytest_bdd.parser.Step object at 0x10377cfd0>\nscenario = <pytest_bdd.parser.Scenario object at 0x10377d030>\n\n    def _find_step_function(request: FixtureRequest, step: Step, scenario: Scenario) -> Any:\n        \"\"\"Match the step defined by the regular expression pattern.\n    \n        :param request: PyTest request object.\n        :param step: Step.\n        :param scenario: Scenario.\n    \n        :return: Function of the step.\n        :rtype: function\n        \"\"\"\n        name = step.name\n        try:\n            # Simple case where no parser is used for the step\n>           return request.getfixturevalue(get_step_fixture_name(name, step.type))\n\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, argname = 'pytestbdd_then_03 Enter the'\n\n    def getfixturevalue(self, argname: str) -> Any:\n        \"\"\"Dynamically run a named fixture function.\n    \n        Declaring fixtures via function argument is recommended where possible.\n        But if you can only decide whether to use another fixture at test\n        setup time, you may use this function to retrieve it inside a fixture\n        or test function body.\n    \n        :raises pytest.FixtureLookupError:\n            If the given fixture could not be found.\n        \"\"\"\n>       fixturedef = self._get_active_fixturedef(argname)\n\nvenv/lib/python3.10/site-packages/_pytest/fixtures.py:554: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, argname = 'pytestbdd_then_03 Enter the'\n\n    def _get_active_fixturedef(\n        self, argname: str\n    ) -> Union[\"FixtureDef[object]\", PseudoFixtureDef[object]]:\n        try:\n            return self._fixture_defs[argname]\n        except KeyError:\n            try:\n>               fixturedef = self._getnextfixturedef(argname)\n\nvenv/lib/python3.10/site-packages/_pytest/fixtures.py:565: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, argname = 'pytestbdd_then_03 Enter the'\n\n    def _getnextfixturedef(self, argname: str) -> \"FixtureDef[Any]\":\n        fixturedefs = self._arg2fixturedefs.get(argname, None)\n        if fixturedefs is None:\n            # We arrive here because of a dynamic call to\n            # getfixturevalue(argname) usage which was naturally\n            # not known at parsing/collection time.\n            assert self._pyfuncitem.parent is not None\n            parentid = self._pyfuncitem.parent.nodeid\n            fixturedefs = self._fixturemanager.getfixturedefs(argname, parentid)\n            # TODO: Fix this type ignore. Either add assert or adjust types.\n            #       Can this be None here?\n            self._arg2fixturedefs[argname] = fixturedefs  # type: ignore[assignment]\n        # fixturedefs list is immutable so we maintain a decreasing index.\n        index = self._arg2index.get(argname, 0) - 1\n        if fixturedefs is None or (-index > len(fixturedefs)):\n>           raise FixtureLookupError(argname, self)\nE           _pytest.fixtures.FixtureLookupError: ('pytestbdd_then_03 Enter the', <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>)\n\nvenv/lib/python3.10/site-packages/_pytest/fixtures.py:448: FixtureLookupError\n\nThe above exception was the direct cause of the following exception:\n\nrequest = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, _pytest_bdd_example = {'button_state': 'true', 'characters': ''}\n\n    @pytest.mark.usefixtures(*func_args)\n    def scenario_wrapper(request: FixtureRequest, _pytest_bdd_example: dict[str, str]) -> Any:\n        scenario = templated_scenario.render(_pytest_bdd_example)\n>       _execute_scenario(feature, scenario, request)\n\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:151: in _execute_scenario\n    step_func = _find_step_function(request, step, scenario)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nrequest = <FixtureRequest for <Function test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message[-true]>>, step = <pytest_bdd.parser.Step object at 0x10377cfd0>\nscenario = <pytest_bdd.parser.Scenario object at 0x10377d030>\n\n    def _find_step_function(request: FixtureRequest, step: Step, scenario: Scenario) -> Any:\n        \"\"\"Match the step defined by the regular expression pattern.\n    \n        :param request: PyTest request object.\n        :param step: Step.\n        :param scenario: Scenario.\n    \n        :return: Function of the step.\n        :rtype: function\n        \"\"\"\n        name = step.name\n        try:\n            # Simple case where no parser is used for the step\n            return request.getfixturevalue(get_step_fixture_name(name, step.type))\n        except FixtureLookupError as e:\n            try:\n                # Could not find a fixture with the same name, let's see if there is a parser involved\n                argumented_name = find_argumented_step_fixture_name(name, step.type, request._fixturemanager, request)\n                if argumented_name:\n                    return request.getfixturevalue(argumented_name)\n                raise e\n            except FixtureLookupError as e2:\n>               raise exceptions.StepDefinitionNotFoundError(\n                    f\"Step definition is not found: {step}. \"\n                    f'Line {step.line_number} in scenario \"{scenario.name}\" in the feature \"{scenario.feature.filename}\"'\n                ) from e2\nE               pytest_bdd.exceptions.StepDefinitionNotFoundError: Step definition is not found: Then \"03 Enter the\". Line 11 in scenario \"02 Verify the maximum and minimum characters that can be sent through a message\" in the feature \"/Users/im-lp-1845/Documents/mobile-automation-framework/Features/Steps/Max_Min_Characters/max_min_characters.feature\"\n\nvenv/lib/python3.10/site-packages/pytest_bdd/scenario.py:84: StepDefinitionNotFoundError"}, "description": "max_min_characters.feature: 02 Verify the maximum and minimum characters that can be sent through a message", "parameters": [{"name": "_pytest_bdd_example", "value": "{'characters': '', 'button_state': 'true'}"}], "start": 1669806418781, "stop": 1669806418783, "uuid": "ef829dba-6cca-4434-a314-7e512c393051", "historyId": "55b3cefe60c8a11f1809d6eb3d355f7c", "testCaseId": "83b4bd73902ac6df21682985e5b5cffa", "fullName": "Features.Steps.Max_Min_Characters.test_01_sender#test_verify_the_maximum_and_minimum_characters_that_can_be_sent_through_a_message", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "Features.Steps.Max_Min_Characters"}, {"name": "suite", "value": "test_01_sender"}, {"name": "host", "value": "IM-LP-1845.local"}, {"name": "thread", "value": "31528-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Features.Steps.Max_Min_Characters.test_01_sender"}]}